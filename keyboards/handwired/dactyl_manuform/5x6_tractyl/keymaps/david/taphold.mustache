// Tap Dance Key Codes
enum {
{{#tapholds}}
    {{keycode}} = {{index}},
{{/tapholds}}
};

// Tap Dance Functions
enum {
  SINGLE_TAP = 1,
  SINGLE_HOLD = 2,
};

typedef struct {
  bool is_press_action;
  int state;
} tap;

int cur_dance (qk_tap_dance_state_t *state);
int cur_dance (qk_tap_dance_state_t *state) {
  if (state->count == 1) {
    if (state->interrupted || !state->pressed)  return SINGLE_TAP;
    //key has not been interrupted, but they key is still held. Means you want to send a 'HOLD'.
    else return SINGLE_HOLD;
  }
  else return 8;
}


{{#tapholds}}
// Tap Dance for {{tap}}
static tap {{tap}}_tap_state = {
  .is_press_action = true,
  .state = 0
};
void {{tap}}_finished (qk_tap_dance_state_t *state, void *user_data) {
  {{tap}}_tap_state.state = cur_dance(state);
  switch ({{tap}}_tap_state.state) {
    case SINGLE_TAP: register_code({{tap}}); break;
    case SINGLE_HOLD: register_code({{hold}}); break;
  }
}

void {{tap}}_reset (qk_tap_dance_state_t *state, void *user_data) {
  switch ({{tap}}_tap_state.state) {
    case SINGLE_TAP: unregister_code({{tap}}); break;
    case SINGLE_HOLD: unregister_code({{hold}}); break;
  }
  {{tap}}_tap_state.state = 0;
}
{{/tapholds}}

qk_tap_dance_action_t tap_dance_actions[] = {
{{#tapholds}}
  [{{keycode}}] = ACTION_TAP_DANCE_FN_ADVANCED(NULL,{{tap}}_finished, {{tap}}_reset),
{{/tapholds}}
};


